"""
Django settings for m98trading project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import datetime
import os
from pathlib import Path

import environ

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# reading .env file
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

BASE_URL = 'http://localhost:8000/'
MANAGER_URL = 'http://localhost:8000/'

# Application definition
DJANGO_APPS = [
    'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
]

LOCAL_APPS = [
    "authentications",
    "trade_bot"
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'import_export',
    'corsheaders',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'django_extensions',
    'drf_yasg',
    'django_celery_beat',
    'django_celery_results',
    'health_check',  # required
    'health_check.db',  # stock Django health checkers
    'health_check.cache',
    'health_check.storage',
    'health_check.contrib.migrations',
    'health_check.contrib.celery',  # requires celery
    'health_check.contrib.celery_ping',  # requires celery
    'health_check.contrib.redis',  # requires Redis broker
    'django_filters',
    'anymail',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = 'm98trading.urls'
CORS_ALLOW_ALL_ORIGINS = True

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'm98trading.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
    'default': env.db(),
    'OPTIONS': {
        # Tell Postgres to connect with 'utf8mb4' character set
        'charset': 'utf8mb4',
    },
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Logging
LOGGING_BACKUP_COUNT = 5
LOGGING_MAX_BYTES = 5242880
LOGGING_LEVEL = env.str('LOGGING_LEVEL', 'INFO')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'root': {
        'level': LOGGING_LEVEL,
        'handlers': ['file', 'console'],
    },
    'formatters': {
        'default': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        }
    },
    'handlers': {
        'file': {
            'level': LOGGING_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 25 * 1024 * 1024,  # 25b
            'backupCount': 5,
            'formatter': 'default',
            'filename': os.path.join(BASE_DIR, 'logs/general.log')
        },
        'celery': {
            'level': LOGGING_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/celery.log'),
            'maxBytes': 25 * 1024 * 1024,  # 25MB
            'backupCount': 5,
            'formatter': 'default',
        },
        'console': {
            'level': LOGGING_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'default'
        },
    },
    'loggers': {
        'django': {
            'level': LOGGING_LEVEL,
            'handlers': ['console'],
            'propagate': False,
        },
        'celery': {
            'level': LOGGING_LEVEL,
            'handlers': ['celery', 'console'],
            'propagate': False,
        },
    }
}

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
    # Extra lookup directories for collectstatic to find static files
)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Setting for admin template U
SIMPLEUI_HOME_TITLE = "M98 Automating Trading"
SIMPLEUI_HOME_ICON = 'fas fa-user-shield'
SIMPLEUI_HOME_INFO = False
SIMPLEUI_HOME_QUICK = True
SIMPLEUI_HOME_ACTION = True
SIMPLEUI_ANALYSIS = True
SIMPLEUI_DEFAULT_THEME = 'ant.design.css'
SIMPLEUI_LOGO = '/static/assets/logo.png'

SIMPLEUI_ICON = {
    'Settings': 'fas fa-id-badge',
    'Trade Bot': 'fab fa-reddit',
    'Token Blacklist': 'fas fa-key',
    'Blacklisted tokens': 'fas fa-lock',
    'Outstanding tokens': 'fab fa-creative-commons-sampling',
    'Celery Results': 'fas fa-poll-h',
    'Group results': 'fas fa-layer-group',
    'Clocked': 'fas fa-stopwatch',
    'Crontabs': 'fas fa-user-astronaut',
    'Intervals': 'fas fa-ellipsis-h',
}

SIMPLEUI_CONFIG = {
    'system_keep': False,
    'menus': [
        {
            'app': 'auth',
            'name': 'Authentication And Authorization',
            'icon': 'fas fa-user-shield',
            'models': [
                {
                    'name': 'Group',
                    'icon': 'fas fa-layer-group',
                    'url': 'auth/group/'
                },
                {
                    'name': 'User',
                    'icon': 'fas fa-address-card',
                    'url': 'auth/user/'
                },
            ]
        },
        {
            'app': 'trade_bot',
            'name': 'Trade Bot',
            'icon': 'fab fa-reddit',
            'models': [
                {
                    'name': 'My Exchange',
                    'icon': 'fas fa-wallet',
                    'url': 'trade_bot/myexchanges/'
                },
                {
                    'name': 'Bots',
                    'icon': 'fas fa-atom',
                    'url': 'trade_bot/bots/'
                },
            ]
        },
        {
            'app': 'django_celery_beat',
            'name': 'Advanced',
            'icon': 'fas fa-funnel-dollar',
            'models': [
                {
                    'name': 'Period Tasks',
                    'icon': 'fas fa-atom',
                    'url': 'django_celery_beat/periodictask/'
                },
                {
                    'name': 'Token Blacklist',
                    'icon': 'fas fa-key',
                    'url': 'token_blacklist/blacklistedtoken'
                },
                {
                    'name': 'Celery Result',
                    'icon': 'fas fa-poll-h',
                    'url': 'django_celery_results/taskresult/'
                },
            ]
        },
    ]
}


REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    # Permission settings
    'DEFAULT_PERMISSION_CLASSES': (
        # All views have this permission active (unless overwritten).
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    "NON_FIELD_ERRORS_KEY": "error",
    "EXCEPTION_HANDLER": "common.utils.errors.error_handler.custom_exception_handler",
    # Pagination style
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 50,
    # Other settings
    "DATE_INPUT_FORMATS": "%s",
    "DATETIME_FORMAT": "%s",
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=60),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': datetime.timedelta(minutes=1),
    'SLIDING_TOKEN_REFRESH_LIFETIME': datetime.timedelta(days=1),
}

REDIS_URL = f"redis://{env.str('REDIS_HOST', 'redis')}:{env.int('REDIS_PORT', 6379)}/1"

REDLOCK = [
    {
        "host": env.str('REDIS_HOST', 'redis'),
        "port": env.int('REDIS_PORT', 6379),
        "db": 1,
    }
]

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        "LOCATION": f"redis://{env.str('REDIS_HOST', 'redis')}:{env.int('REDIS_PORT', 6379)}/1",
        'TIMEOUT': 60,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'SOCKET_CONNECT_TIMEOUT': 60,
            'SOCKET_TIMEOUT': 60,
            'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
        }
    }
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
        },
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'User-Token'
        }
    },
    'USE_SESSION_AUTH': False
}

CORS_ALLOW_CREDENTIALS = True

# Celery settings
BROKER_TYPE = env.str('BROKER_TYPE', 'rabbitmq')
CELERY_BROKER_URL = (f"amqp://{env.str('RABBITMQ_USERNAME', 'rabbitmq')}:{env.str('RABBITMQ_PASSWORD', 'rabbitmq')}"
                     f"@{env.str('RABBITMQ_HOST', 'rabbitmq')}:5672/")
CELERY_RESULT_BACKEND = f"redis://{env.str('REDIS_HOST', 'redis')}:{env.int('REDIS_PORT', 6379)}/0"
CELERY_RESULT_EXPIRES = 60 * 60  # 1 hour
CELERY_DB_REUSE_MAX = 10
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_DEFAULT_QUEUE = 'celery'
BOT_QUEUE_NAME = 'bot_tasks'

PRIVATE_KEY_ENCRYPT_DECRYPT = os.environ.get('PRIVATE_KEY_ENCRYPT_DECRYPT')

#Telegram Config
TELEGRAM_BOT_API_KEY = os.environ.get('TELEGRAM_BOT_API_KEY', None)
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', None)

# Rabbitmq
TELEGRAM_MESSAGE_TOPIC = os.getenv('TELEGRAM_MESSAGE_TOPIC', 'telegram_message_topic')
TELEGRAM_SUBSCRIPTION_QUEUE = os.getenv('TELEGRAM_SUBSCRIPTION_QUEUE', 'telegram_subscription_queue')
